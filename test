using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using DataGridSample.iOS;
using DataGridSample.Services;
using Foundation;
//using ToastMessage.iOS;
using UIKit;
[assembly: Xamarin.Forms.Dependency(typeof(Toast_IOS))]
namespace DataGridSample.iOS
{
    public class Toast_IOS : IToast
    {
        const double LONG_DELAY = 3.5;


        NSTimer alertDelay;
        UIAlertController alert;

        public void Show(string message)
        {
            ShowAlert(message, LONG_DELAY);
        }


        void ShowAlert(string message, double seconds)
        {
            alertDelay = NSTimer.CreateScheduledTimer(seconds, (obj) =>
            {
                dismissMessage();
            });
            alert = UIAlertController.Create(null, message, UIAlertControllerStyle.Alert);
            UIApplication.SharedApplication.KeyWindow.RootViewController.PresentViewController(alert, true, null);
        }
        void dismissMessage()
        {
            if (alert != null)
            {
                alert.DismissViewController(true, null);
            }
            if (alertDelay != null)
            {
                alertDelay.Dispose();
            }
        }

    }
}

https://www.designevo.com/tw/apps/logo/?name=blue-air-conditioning-blade
https://www.ifourtechnolab.us/bloglist/how-to-create-a-half-screen-custom-camera-view-using-xamarin-forms
https://qiita.com/muak_x/items/c441e1e795ba22d597d6

https://www.py4u.net/discuss/1934723


using DataGridSample.ViewModels;
using System;
using Xamarin.Forms;

namespace DataGridSample.Views
{
    public partial class MainTabbedPage : TabbedPage
    {
        NewViewModel v;

        public delegate void NotifyParentDelegate();
        public delegate void NotifyParentDelegate2();
        TabChildrenPage1 page1;
        TabChildrenPage2 page2;
        public MainTabbedPage(NewViewModel _v)
        {
            page1 = new TabChildrenPage1(_v);
            page2 = new TabChildrenPage2(_v);
            page1.NotifyParentEvent += new NotifyParentDelegate(_child_NotifyParentEvent);
            page1.NotifyParentEvent2 += new NotifyParentDelegate2(_child_NotifyParentEvent2);
            //var page2 = new TabChildrenPage2(_v);
            //page1.NotifyParentEvent += new NotifyParentDelegate(_child_NotifyParentEvent);
            //page2.ShowMessagesEvent += (messages) =>
            //{

            //};
            v =  _v;
            v.Title = "gy";
            Children.Add(page1);
            Children.Add(page2);
            //this.Children.Add(new BarcelonaPage());
        }
        void _child_NotifyParentEvent()
        {
            Children.RemoveAt(1);// = false;
        }
        void _child_NotifyParentEvent2()
        {
            Children.Add(page2);
        }
        //private void Page1_ShowMessagesEvent(string message)
        //{
        //    Children[1].IsVisible = false;
        //}


    }
}
using DataGridSample.ViewModels;
using Xamarin.Forms;
using static DataGridSample.Views.MainTabbedPage;

namespace DataGridSample.Views
{
    public partial class TabChildrenPage1 : ContentPage
    {
        NewViewModel v;
        public event NotifyParentDelegate NotifyParentEvent;
        public event NotifyParentDelegate2 NotifyParentEvent2;
        public TabChildrenPage1(NewViewModel _v)
        {
            Title = "A";
            v = _v;
            v.isBusy = true;
            InitializeComponent();

            //this.Children.Add(new BarcelonaPage());
        }
        protected override void OnDisappearing()
        {
            base.OnDisappearing();

        }
        protected override void OnAppearing()
        {
            base.OnAppearing();

        }

        private void Button_Clicked(object sender, System.EventArgs e)
        {
            NotifyParent();
        }
        public void NotifyParent() 
        { 
            if (NotifyParentEvent != null) 
            {
                //Raise Event. All the listeners of this event will get a call.               
                NotifyParentEvent(); 
            } 
        }

        public void NotifyParent2()
        {
            if (NotifyParentEvent2 != null)
            {
                //Raise Event. All the listeners of this event will get a call.               
                NotifyParentEvent2();
            }
        }


        public static void AddMethod(string s)
        {
           
        }

        private void Button1_Clicked(object sender, System.EventArgs e)
        {
            NotifyParent2();
        }
    }

}
