    void f(float x,float y)
        {

            var lb = new Label() { Text = "1", Location  = new Point(Convert.ToInt32(x), Convert.ToInt32(y)) 
            , BackColor= Color.Transparent
        };
            lb.Width = 50;
            lb.Height = 50;
            pictureBox1.Controls.Add(lb);
            //var pos = this.PointToScreen(lb.Location);
            //pos = pictureBox1.PointToClient(pos);
            //lb.Parent = pictureBox1;
            //lb.Location = pos;
            //lb.BackColor = Color.Transparent;
        }
  
  
  private void pictureBox1_MouseDown(object sender, MouseEventArgs e)
        {
            int imgWidth = pictureBox1.Image.Width;
            int imgHeight = pictureBox1.Image.Height;
            int boxWidth = pictureBox1.Size.Width;
            int boxHeight = pictureBox1.Size.Height;

            //This variable will hold the result
            float X = e.X;
            float Y = e.Y;
            //Comparing the aspect ratio of both the control and the image itself.
            if (imgWidth / imgHeight > boxWidth / boxHeight)
            {
                //If true, that means that the image is stretched through the width of the control.
                //'In other words: the image is limited by the width.

                //The scale of the image in the Picture Box.
                float scale = boxWidth / imgWidth;

                //Since the image is in the middle, this code is used to determinate the empty space in the height
                //'by getting the difference between the box height and the image actual displayed height and dividing it by 2.
                float blankPart = (boxHeight - scale * imgHeight) / 2;

                Y -= blankPart;

                //Scaling the results.
                X /= scale;
                Y /= scale;
            }
            else
            {
                //If true, that means that the image is stretched through the height of the control.
                //'In other words: the image is limited by the height.

                //The scale of the image in the Picture Box.
                float scale = boxHeight / imgHeight;

                //Since the image is in the middle, this code is used to determinate the empty space in the width
                //'by getting the difference between the box width and the image actual displayed width and dividing it by 2.
                float blankPart = (boxWidth - scale * imgWidth) / 2;
                X -= blankPart;

                //Scaling the results.
                X /= scale;
                Y /= scale;
            }
            label1.Text = Conversion.Int(X) + ", " + Conversion.Int(Y);
        }
  void remove(string s)
		{
			var g = SpouseTS.OfType<EntryCell>().Where(j => j.ClassId == "csid" + s).FirstOrDefault();
			SpouseTS.Remove(g);

		}
		void add(string s)
		{
			EntryCell entInput = new EntryCell
			{
				ClassId="csid"+s,
				Placeholder = "Name"
			};
			string txt = "{Binding Name}";
			entInput.SetBinding(EntryCell.TextProperty, txt);
			SpouseTS.Add(entInput);
		}

  
  https://gist.github.com/Ci-Jie/847074c776e8bccccffb353c5361d232 
   https://github.com/acaliaro/OpenPdf/tree/master/OpenPdf
   <!DOCTYPE html>
<html>
<head>

<style>
table, td, th {
  border: 1px solid black;
 
}

td
{
 width: 33%;
  text-align: right;
}

tbody>tr>td:first-child
{
  text-align: center;
}
table {
  width: 100%;
 
}
</style>
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
<script src="./jquery.scrollTableBody-1.0.0.js"></script>


<script>
 
$(document).ready(function(){

  var JData = [{ name: "Wind", age: "20", height: "182" },
           { name: "Wind", age: "18", height: "165" },
           { name: "Edge", age: "25", height: "171" }]
  
  //我們可以透過.length得知其中的物件數
  var NumOfJData = JData.length; //NumOfJData=3
  var select = $('#myselect');
  
 const dis =[...new Set(JData.map(x=>x.name))];

  $('option', select).remove();
$.each(dis, function(i, value) {
    var option = new Option(value, value);
    select.append($(option));
});
  $("#JSON_table").empty();
   $("#JSON_table").append( "<thead><tr>" +
                            "<th>" + "name"   + "</th>" +
                            "<th>" + "age"   + "</th>" +
                            "<th>" + "height" + "</th>" +
                            "</tr></thead><tbody></tbody>");


if(dis.length>0)
{
  const filtered = JData.filter(x => x.name == dis[0]);
 refresh (filtered);
 
}
  // refresh (JData);
 
 $('#myselect').on('change', function (e) {
    var optionSelected = $("option:selected", this);
    var valueSelected = this.value;
    const filteredHomes = JData.filter(x => x.name == valueSelected);
 refresh (filteredHomes);
});

function refresh(Data)
{
   
 $("#JSON_table > tbody").empty();
   
 //$("#JSON_table > tbody").append("<tbody>");
    
   for (var i = 0; i < Data.length; i++) {
     $("#JSON_table > tbody").append("<tr>" +
                            "<td>" + Data[i].name   + "</td>" +
                            "<td>" + Data[i].age    + "</td>" +
                            "<td>" + Data[i].height + "</td>" +
                            "</tr>");
 
   }

 //  $("#JSON_table").append("</tbody>");
}


});
 
</script>
  <script type="text/javascript">
            $(function() {
                $("#JSON_table").scrollTableBody();
            });
        </script>
</head>
<body>

<label for="cars">Choose a car:</label>
  <select id="myselect">
  
  </select>
<table id="JSON_table">

</table>

</body>
</html>

   
   
   
   
   
   
   
   <StackLayout >

                    <Grid Padding="0" VerticalOptions="CenterAndExpand">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="40" />
                            <!--<RowDefinition Height="40" />
                        <RowDefinition Height="40" />
                        <RowDefinition Height="40" />-->
                        </Grid.RowDefinitions>

                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="4*" />
                            <ColumnDefinition Width="2*" />
                            <ColumnDefinition Width="4*" />
                        </Grid.ColumnDefinitions>

                        <Button Grid.Row="0" Grid.Column="0"  HorizontalOptions="StartAndExpand" Margin="-5,0,0,-5"/>
                        <Button Grid.Row="0" Grid.Column="1"  HorizontalOptions="FillAndExpand"/>
                        <Button Grid.Row="0" Grid.Column="2"   HorizontalOptions="End"/>
                        <!--<Entry Grid.Row="2" Grid.Column="1" Placeholder="Phone"  HorizontalOptions="FillAndExpand"/>
                    <Button Grid.Row="3" Grid.Column="0" Grid.ColumnSpan="2"  HorizontalOptions="FillAndExpand" Text="Register" TextColor="White" BackgroundColor="Black"/>-->
                    </Grid>
                    <!--<Button VerticalOptions="Center"
        Text="Login"
        Command="{Binding LoginCommand}"/>-->
                    <!--<Button Text="Loginqqqq" VerticalOptions="Center" 
                                Command="{Binding Path=BindingContext.PerformSearch, Source={x:Reference MainPage},Mode=TwoWay}" CommandParameter="1" 
                                Style="{StaticResource InxButton}"/>-->
                </StackLayout>

using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using DataGridSample.iOS;
using DataGridSample.Services;
using Foundation;
//using ToastMessage.iOS;
using UIKit;
[assembly: Xamarin.Forms.Dependency(typeof(Toast_IOS))]
namespace DataGridSample.iOS
{
    public class Toast_IOS : IToast
    {
        const double LONG_DELAY = 3.5;


        NSTimer alertDelay;
        UIAlertController alert;

        public void Show(string message)
        {
            ShowAlert(message, LONG_DELAY);
        }


        void ShowAlert(string message, double seconds)
        {
            alertDelay = NSTimer.CreateScheduledTimer(seconds, (obj) =>
            {
                dismissMessage();
            });
            alert = UIAlertController.Create(null, message, UIAlertControllerStyle.Alert);
            UIApplication.SharedApplication.KeyWindow.RootViewController.PresentViewController(alert, true, null);
        }
        void dismissMessage()
        {
            if (alert != null)
            {
                alert.DismissViewController(true, null);
            }
            if (alertDelay != null)
            {
                alertDelay.Dispose();
            }
        }

    }
}

https://www.designevo.com/tw/apps/logo/?name=blue-air-conditioning-blade
https://www.ifourtechnolab.us/bloglist/how-to-create-a-half-screen-custom-camera-view-using-xamarin-forms
https://qiita.com/muak_x/items/c441e1e795ba22d597d6

https://www.py4u.net/discuss/1934723


using DataGridSample.ViewModels;
using System;
using Xamarin.Forms;

namespace DataGridSample.Views
{
    public partial class MainTabbedPage : TabbedPage
    {
        NewViewModel v;

        public delegate void NotifyParentDelegate();
        public delegate void NotifyParentDelegate2();
        TabChildrenPage1 page1;
        TabChildrenPage2 page2;
        public MainTabbedPage(NewViewModel _v)
        {
            page1 = new TabChildrenPage1(_v);
            page2 = new TabChildrenPage2(_v);
            page1.NotifyParentEvent += new NotifyParentDelegate(_child_NotifyParentEvent);
            page1.NotifyParentEvent2 += new NotifyParentDelegate2(_child_NotifyParentEvent2);
            //var page2 = new TabChildrenPage2(_v);
            //page1.NotifyParentEvent += new NotifyParentDelegate(_child_NotifyParentEvent);
            //page2.ShowMessagesEvent += (messages) =>
            //{

            //};
            v =  _v;
            v.Title = "gy";
            Children.Add(page1);
            Children.Add(page2);
            //this.Children.Add(new BarcelonaPage());
        }
        void _child_NotifyParentEvent()
        {
            Children.RemoveAt(1);// = false;
        }
        void _child_NotifyParentEvent2()
        {
            Children.Add(page2);
        }
        //private void Page1_ShowMessagesEvent(string message)
        //{
        //    Children[1].IsVisible = false;
        //}


    }
}
using DataGridSample.ViewModels;
using Xamarin.Forms;
using static DataGridSample.Views.MainTabbedPage;

namespace DataGridSample.Views
{
    public partial class TabChildrenPage1 : ContentPage
    {
        NewViewModel v;
        public event NotifyParentDelegate NotifyParentEvent;
        public event NotifyParentDelegate2 NotifyParentEvent2;
        public TabChildrenPage1(NewViewModel _v)
        {
            Title = "A";
            v = _v;
            v.isBusy = true;
            InitializeComponent();

            //this.Children.Add(new BarcelonaPage());
        }
        protected override void OnDisappearing()
        {
            base.OnDisappearing();

        }
        protected override void OnAppearing()
        {
            base.OnAppearing();

        }

        private void Button_Clicked(object sender, System.EventArgs e)
        {
            NotifyParent();
        }
        public void NotifyParent() 
        { 
            if (NotifyParentEvent != null) 
            {
                //Raise Event. All the listeners of this event will get a call.               
                NotifyParentEvent(); 
            } 
        }

        public void NotifyParent2()
        {
            if (NotifyParentEvent2 != null)
            {
                //Raise Event. All the listeners of this event will get a call.               
                NotifyParentEvent2();
            }
        }


        public static void AddMethod(string s)
        {
           
        }

        private void Button1_Clicked(object sender, System.EventArgs e)
        {
            NotifyParent2();
        }
    }

}
